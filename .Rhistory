ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki2") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Group the data appropriately
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps, na.rm = T))
# Plot the histogram
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Group the data appropriately
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
complete.cases()
# Group the data appropriately
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(complete.cases())
# Group the data appropriately
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Plot the histogram
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
?print
print("Mean # of steps taken per day is")
mean(StepsByDay$steps)
print("Median # of steps taken per day is")
median(StepsByDay$steps)
# Calculate the mean and median of total number of steps taken per day
Mean <- mean(StepsByDay$steps)
Median <- median(StepsByDay$steps)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 2)
options(scipen = 999)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 2)
Median <- median(StepsByDay$steps)
# Group the data appropriately, leave NAs as they are
StepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = sum(steps))
# Group the data appropriately, leave NAs as they are
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
# Group the data appropriately, leave NAs as they are
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
View(MeanStepsByInterval)
# Group the data appropriately, leave NAs as they are
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps))
View(data)
# Group the data appropriately, leave NAs as they are
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
# Group the data appropriately
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
?aes
?ggplot
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps))
?geom_line
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line()
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval")
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from AM 0.00)", y = "Steps")
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from midnight)", y = "Steps")
# Check the maximum interval by steps
maxsteps <- max(MeanStepsByInterval$steps)
maxstepsInterval <- which(MeanStepsByInterval$steps == maxsteps)
maxstepsInterval <- MeanStepsByInterval[maxstepsIntervalRow, 1]
maxstepsIntervalRow <- which(MeanStepsByInterval$steps == maxsteps)
maxstepsInterval <- MeanStepsByInterval[maxstepsIntervalRow, 1]
View(maxstepsInterval)
?hm
maxstepsInterval <- hm(as.integer(MeanStepsByInterval[maxstepsIntervalRow, 1]))
maxstepsInterval <- as.integer(MeanStepsByInterval[maxstepsIntervalRow, 1])
maxstepsInterval <- as.character(MeanStepsByInterval[maxstepsIntervalRow, 1])
length(maxstepsInterval)
nchar(maxstepsInterval)
103*5
mod(515, 60)
515 %% 60
520 %% 60
maxstepsIntervalStart <- which(MeanStepsByInterval$steps == maxsteps)*5
maxstepsIntervalStart <- which(MeanStepsByInterval$steps == maxsteps)
maxstepsIntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalHours <- floor(IntervalStart)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalHours <- floor(IntervalStart)
IntervalHours <- floor(IntervalStart/60)
IntervalMinutes <- IntervalStart %% 60
IntervalTime <- hm(IntervalHours, IntervalMinutes)
?paste
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
Interval <-which(MeanStepsByInterval$steps == maxsteps)
Interval <- which(MeanStepsByInterval$steps == maxsteps)
# Check the maximum interval by steps
maxsteps <- round(max(MeanStepsByInterval$steps), 0)
Interval <- which(MeanStepsByInterval$steps == maxsteps)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalHours <- floor(IntervalStart/60)
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
rm(list = ls())
# Load the raw data and convert date to date-type
data <- read.table(unz("activity.zip", "activity.csv"), header = T, sep = ",")
data$date <- ymd(data$date)
# Group the data appropriately, ignore days with NA steps
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Plot the histogram
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 0)
Median <- median(StepsByDay$steps)
# Group the data appropriately
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
# Plot time-series
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from midnight)", y = "Steps")
# Check the maximum interval by steps
maxsteps <- round(max(MeanStepsByInterval$steps), 0)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalMinutes <- IntervalStart %% 60
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
# Group the data appropriately
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
# Check the maximum interval by steps
maxsteps <- round(max(MeanStepsByInterval$steps), 0)
Interval <- which(MeanStepsByInterval$steps == maxsteps)
# Check the maximum interval by steps
maxsteps <- max(MeanStepsByInterval$steps)
Interval <- which(MeanStepsByInterval$steps == maxsteps)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalMinutes <- IntervalStart %% 60
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
IntervalHours <- floor(IntervalStart/60)
IntervalMinutes <- IntervalStart %% 60
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
maxstepsround <- round(max(MeanStepsByInterval$steps), 0)
maxstepsround <- round(maxsteps, 0)
# Load the required libraries
library(ggplot2)
# Load the required libraries
library(ggplot2)
library(dplyr)
library(lubridate)
# Load the raw data and convert date to date-type
data <- read.table(unz("activity.zip", "activity.csv"), header = T, sep = ",")
data$date <- ymd(data$date)
View(data)
# Group the data appropriately, ignore days with NA steps
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
View(StepsByDay)
# Plot the histogram
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 0)
Median <- median(StepsByDay$steps)
# Group the data appropriately
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
View(MeanStepsByInterval)
# Plot time-series
ggplot(data = MeanStepsByInterval,
aes(MeanStepsByInterval$interval, MeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from midnight)", y = "Steps")
# Check the maximum interval by steps
maxsteps <- max(MeanStepsByInterval$steps)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalHours <- floor(IntervalStart/60)
IntervalMinutes <- IntervalStart %% 60
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
maxstepsround <- round(maxsteps, 0)
# Calculate the amount of NAs in the original data
NAs <- is.na(data$steps)
# Calculate the amount of NAs in the original data
NAs <- sum(is.na(data$steps))
NAportion <- NAs/nrow(data)
# Fill in NAs with the mean of the specified interval
dataImputed <- data
?match
data$interval[1]
which(MeanStepsByInterval$interval == data$interval[1])
which(MeanStepsByInterval$interval == data$interval[2])
which(MeanStepsByInterval$interval == data$interval[500])
View(dataImputed)
dataImputed$steps <- for (i in 1:nrow(data)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i])
}
# Fill in NAs with the mean of the specified interval
dataImputed <- data
dataImputed$steps <- for (i in 1:nrow(dataImputed)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i])
}
# Fill in NAs with the mean of the specified interval
dataImputed <- data
dataImputed$steps[1] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[1])]
# Fill in NAs with the mean of the specified interval
dataImputed <- data
for (i in 1:nrow(dataImputed)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i] <- dataImputed$steps[i])
}
# Calculate the amount of NAs in the original data
NAs <- sum(is.na(data$steps))
NAportion <- NAs/nrow(data)
# Fill in NAs with the mean of the specified interval to a new dataframe
dataImputed <- data
for (i in 1:nrow(dataImputed)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i] <- dataImputed$steps[i])
}
# Group the imputed data appropriately,
StepsByDayImputed <- dataImputed %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Plot the histogram
ggplot(data = StepsByDayImputed, aes(StepsByDayImputed$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "orange4") +
labs(title = "Histogram for total steps per day (NAs Imputed)") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Plot the histogram
ggplot(data = StepsByDayImputed, aes(StepsByDayImputed$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "orange4") +
labs(title = "Histogram for total steps per day (NAs Imputed)") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:20)
# Plot the histogram
ggplot(data = StepsByDayImputed, aes(StepsByDayImputed$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "orange2") +
labs(title = "Histogram for total steps per day (NAs Imputed)") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:20)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDayImputed$steps), 0)
# Calculate the mean and median of total number of steps taken per day
MeanImputed <- round(mean(StepsByDayImputed$steps), 0)
MedianImputed <- median(StepsByDayImputed$steps)
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Plot the histogram
ggplot(data = StepsByDay, aes(StepsByDay$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "khaki4") +
labs(title = "Histogram for total steps per day") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:15)
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 0)
Median <- median(StepsByDay$steps)
NAs <- sum(is.na(data$steps))
NAportion <- NAs/nrow(data)
# Fill in NAs with the mean of the specified interval to a new dataframe
dataImputed <- data
for (i in 1:nrow(dataImputed)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i] <- dataImputed$steps[i])
}
# Group the imputed data appropriately,
StepsByDayImputed <- dataImputed %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Plot the histogram
ggplot(data = StepsByDayImputed, aes(StepsByDayImputed$steps)) +
geom_histogram(binwidth = 2000,
col = "black",
fill = "orange2") +
labs(title = "Histogram for total steps per day (NAs Imputed)") +
labs(x = "Steps per day", y = "Frequency") +
scale_y_continuous(breaks = 0:20)
# Calculate the mean and median of total number of steps taken per day
MeanImputed <- round(mean(StepsByDayImputed$steps), 0)
MedianImputed <- round(median(StepsByDayImputed$steps), 0)
NAportion <- round(NAs/nrow(data) * 100, 2)
weekdays()
weekdays(head(data$date))
?weekdays
weekdays(head(data$date))
levels(weekdays())
class(weekdays(head(data$date)))
?wday
wday(head(data$date))
wday(head(data$date), week_start = 1)
library(ggplot2)
library(dplyr)
library(lubridate)
wday(today(), week_start = 1)
# Create vectors to identify weekdays and weekenddays
dataImputed$daytype <- as.factor(c())
# Load the raw data and convert date to date-type
data <- read.table(unz("activity.zip", "activity.csv"), header = T, sep = ",")
data$date <- ymd(data$date)
# Group the data appropriately, ignore days with NA steps
StepsByDay <- data %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Calculate the mean and median of total number of steps taken per day
Mean <- round(mean(StepsByDay$steps), 0)
Median <- median(StepsByDay$steps)
# Group the data appropriately
MeanStepsByInterval <- data %>%
group_by(interval) %>%
summarise(steps = mean(steps, na.rm = T))
# Check the maximum interval by steps
maxsteps <- max(MeanStepsByInterval$steps)
Interval <- which(MeanStepsByInterval$steps == maxsteps)
IntervalStart <- (which(MeanStepsByInterval$steps == maxsteps)-1)*5
IntervalHours <- floor(IntervalStart/60)
IntervalTime <- paste(IntervalHours, IntervalMinutes, sep = ".")
maxstepsround <- round(maxsteps, 0)
# Calculate the amount of NAs in the original data
NAs <- sum(is.na(data$steps))
NAportion <- round(NAs/nrow(data) * 100, 2)
# Fill in NAs with the mean of the specified interval to a new dataframe
dataImputed <- data
for (i in 1:nrow(dataImputed)) {
ifelse(is.na(dataImputed$steps[i]),
dataImputed$steps[i] <- MeanStepsByInterval$steps[which(MeanStepsByInterval$interval == data$interval[i])],
dataImputed$steps[i] <- dataImputed$steps[i])
}
# Group the imputed data appropriately,
StepsByDayImputed <- dataImputed %>%
group_by(date) %>%
summarise(steps = sum(steps)) %>%
subset(!is.na(steps))
# Calculate the mean and median of total number of steps taken per day
MeanImputed <- round(mean(StepsByDayImputed$steps), 0)
MedianImputed <- round(median(StepsByDayImputed$steps), 0)
# Create vector to identify observation between weekdays and weekenddays
dataImputed$daytype <- as.factor(c())
# Create vector to identify observation between weekdays and weekenddays
dataImputed$daytype <- as.factor()
# Create vector to identify observation between weekdays and weekenddays
for (i in 1:nrow(dataImputed)) {
ifelse(wday(dataImputed$date[i], week_start = 1) <= 5,
dataImputed$daytype <- "weekday",
dataImputed$daytype <- "weekend"
)
}
View(dataImputed)
str(dataImputed$daytype)
summary(dataImputed$daytype)
dataImputed$daytype <- as.factor(dataImputed$daytype)
summary(dataImputed$daytype)
# Create vector to identify observation between weekdays and weekenddays
for (i in 1:nrow(dataImputed)) {
ifelse(wday(dataImputed$date[i], week_start = 1) <= 5,
dataImputed$daytype[i] <- "weekday",
dataImputed$daytype[i] <- "weekend"
)
}
rm(dataImputed$date)
rm(dataImputed$daytype)
drop(dataImputed$daytype)
# Create vector to identify observation between weekdays and weekenddays
dates <- unique(dataImputed$date)
# Create vector to identify observation between weekdays and weekenddays
dates <- as.data.frame(unique(dataImputed$date))
for (i in 1:nrow(dates)) {
ifelse(wday(dates[i], week_start = 1) <= 5,
dates$daytype[i] <- "weekday",
dates$daytype[i] <- "weekend"
)
}
View(dates)
# Create vector to identify observation between weekdays and weekenddays
dates <- as.data.frame()
# Create vector to identify observation between weekdays and weekenddays
dates <- as.data.frame(NULL)
dates$date <- unique(dataImputed$date)
# Create vector to identify observation between weekdays and weekenddays
dates <- unique(dataImputed$date)
wday("maanantai")
wday("monday")
str(dataImputed)
dataImputed <- dataImputed[-4]
suppressMessages(for (i in 1:nrow(dataImputed)) {
ifelse(wday(dataImputed$date[i], week_start = 1) <= 5,
dataImputed$daytype[i] <- "weekday",
dataImputed$daytype[i] <- "weekend"
)})
View(dataImputed)
str(dataImputed)
dataImputed$daytype <- as.factor(dataImputed$daytype)
str(dataImputed)
unique(dataImputed$daytype)
# Group the data appropriately
ImputedMeanStepsByInterval <- dataImputed %>%
group_by(interval) %>%
summarise(steps = mean(steps))
# Make a panel plot of time-series between weekdays and weekends
ggplot(data = ImputedMeanStepsByInterval,
aes(ImputedMeanStepsByInterval$interval, ImputedMeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from midnight)", y = "Steps") +
facet_grid(daytype ~ .)
View(ImputedMeanStepsByInterval)
# Group the data appropriately
ImputedMeanStepsByInterval <- dataImputed %>%
group_by(interval, daytype) %>%
summarise(steps = mean(steps))
View(ImputedMeanStepsByInterval)
# Make a panel plot of time-series between weekdays and weekends
ggplot(data = ImputedMeanStepsByInterval,
aes(ImputedMeanStepsByInterval$interval, ImputedMeanStepsByInterval$steps)) +
geom_line() +
labs(title = "Mean daily steps per 5-minute interval") +
labs(x = "5-minute Interval (Starting from midnight)", y = "Steps") +
facet_grid(daytype ~ .)
install.packages(knitr)
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
install.packages("knitr")
library(knitr)
?knit2html
knit2html(PA1_template.Rmd)
knit2html("PA1_template.Rmd")
